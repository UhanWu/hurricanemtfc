---
title: "resiliencerecovery"
format: html
editor: visual
---

```{r}

library(tidyverse)

rere <- TXhurprocss |>
  filter(date > '2021-02-13' & date < '2021-02-20') |>
  merge(TXpop) |>
  filter(sum < population)  |>
  mutate(datetime = as.POSIXct(paste(date, time), 
                               format = "%Y-%m-%d %H:%M:%S")) |>
  mutate(vulcounty = sum/population, .by = c(county, fips_code)) |>
  arrange(datetime) |>
  filter(sum >= 0.01*population) |>
  mutate(maxvulcounty = max(sum)/population, .by = c(county, fips_code))  |>
  mutate(maxdate = ifelse(vulcounty == maxvulcounty, datetime, NA), 
         .by = c(county, fips_code)) |>
  mutate(maxdate = max(maxdate, na.rm = TRUE),
         .by = c(county, fips_code)) |>
  mutate(maxdate = as.POSIXct(maxdate),
         .by = c(county, fips_code)) |>
  mutate(date_start = min(datetime),date_end = max(datetime),
         .by = c(county, fips_code)) |>
  summarise(resilience = maxdate - date_start, 
            recover = date_end- maxdate, 
            .by = c(county, fips_code)) |>
  unique() |>
  arrange(county)

  
```

```{r}
alexkuaihurdf <- read_csv("og_past2004.csv")




kuaidf <- alexkuaihurdf |>
  filter(storm_id == "AL092017"|
         storm_name == "NICHOLAS" |
        storm_name == "IKE")  |>
   group_by(storm_id) %>%  # or group_by(storm_name) if you prefer
  arrange(entry_time) |>
  slice_head(n = 20) |>
  mutate(max_wind = max_wind*1.1) |>
  mutate(`34kt_ne` = `34kt_ne`*1.1,
         `34kt_se` = `34kt_se`*1.1,
         `34kt_sw` = `34kt_sw`*1.1,
         `34kt_nw` = `34kt_nw`*1.1) |>
  mutate(`50kt_ne` = `50kt_ne`*1.1,
         `50kt_se` = `50kt_se`*1.1,
         `50kt_sw` = `50kt_sw`*1.1,
         `50kt_nw` = `50kt_nw`*1.1) |>
  mutate(`64kt_ne` = `64kt_ne`*1.1,
         `64kt_se` = `64kt_se`*1.1,
         `64kt_sw` = `64kt_sw`*1.1,
         `64kt_nw` = `64kt_nw`*1.1) 

write_csv(kuaidf, "kuaidf.csv")
  
  
  
```



```{r}
vulnerbaility

reredf

simulatehur <- read_csv("yuhan_.csv")


hurricanedf |>
  filter(HNAME == "HARVEY")

simulatehur |>
  ggplot(aes(x = lon, y = lat)) + 
  geom_point()

```
```{r}
hurricanedf |>
  mutate(
    lat = as.double(str_sub(LATITUDE, 1, -2)), # Extracts all but the last character
    long = as.double(str_sub(LONGITUDE, 1, -2)) # Extracts all but the last character
  ) %>%
  mutate(
    long = if_else(str_ends(LONGITUDE, "W"), -long, long) # Assumes W is negative, E is positive
  ) |>
   filter(lat >= 25.8, lat <= 36.5, long >= -106.6, long <= -93.5) |>
  filter(WINDSPEED_KT > 0) |>
  summarise(maxwindspeed = max(WINDSPEED_KT), .by = HID) |>
  ggplot(aes(x = maxwindspeed)) + 
  geom_histogram(color = "black", fill = "lightblue", binwidth = 10)
```

```{r}
maxwinddf |>
  ggplot(aes(x = maxwind)) +
  geom_histogram(aes(y = after_stat(count/sum(count)))
                 ,color = "black", fill = "lightblue", binwidth = 5) + 
  scale_y_continuous(labels = scales::percent_format()) +
  theme_bw()  + 
  labs(x = "Maximum Windspeed Upon Landfall",
       y = "Probability")
```

```{r}
maxwinddf
```
```{r}
hurricanedf |>
  filter(POINT_TYPE == "L") |>
  mutate(Max_34KT = pmax(NE_34KT, SE_34KT, NW_34_KT, SW_34_KT)) |>
  summarise(maxwindspeedHR = max(WINDSPEED_KT), .by = c(HID, year)) |>
  summarise(maxwindspeedYR = max(maxwindspeedHR), .by = year) |>
  filter(year >= 1901) |>
  ggplot(aes(x = year, y = maxwindspeedYR)) + 
  geom_point() + 
  geom_line(alpha = 0.8) +
  geom_smooth(method="lm", formula= y~x, se=FALSE, color = "red") +
  labs(x = "Year", y = "Max. Windspeed at Landfall") +
  scale_x_continuous(breaks = seq(min(1900), max(2020), by = 10),  # Adjust breaks
                     labels = seq(min(1900), max(2020), by = 10))+ # Adjust labels
theme_bw()
```

```{r}
lgdf |>
  summarise(total_outages = sum(maxsumdaily), .by = fips_code) |>
  mutate(county_fips = as.character(fips_code)) |>
  left_join(counties, by = "county_fips") %>% 
  filter(state_name =="Texas") %>% 
  ggplot(mapping = aes(long, lat, group = group, fill = total_outages)) +
  geom_polygon(color = "black", size = .25) +
  scale_fill_gradientn(colors = c("white", "blue"),
                       guide = guide_colorbar(title.position = "top")) +
  coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
  theme(legend.title = element_text(),
        legend.key.width = unit(.5, "in")) +
  labs(fill = "Total Outages ", x = "Longitude", y = "Latitude") + 
  theme_bw()
```

