---
title: "testEAGLEI"
format: revealjs
editor: visual
---

```{r}

library(tidyverse)
outagerawdf <- read_csv("eaglei_outages_2022.csv")
outagerawdf2021 <- read_csv("eaglei_outages_2021.csv")
outagerawdf2020 <- read_csv("eaglei_outages_2020.csv")
outagerawdf2019 <- read_csv("eaglei_outages_2019.csv")
outagerawdf2018 <- read_csv("eaglei_outages_2018.csv")
outagerawdf2017 <- read_csv("eaglei_outages_2017.csv")
outagerawdf2016 <- read_csv("eaglei_outages_2016.csv")
outagerawdf2015 <- read_csv("eaglei_outages_2015.csv")
```






```{r}
outageALL |>
  filter(county == "Harris") |>
  filter(date > '2021-09-11' & date < '2021-09-20' ) |>
  arrange(date) |>
  mutate(date = as.Date(date)) |>
  ggplot(aes(x = date, y = maxdayoutage)) + 
  geom_col()

outageALL |>
  filter(county == "Harris") |>
  filter(date > '2020-10-01' & date < '2020-10-20' ) |>
  arrange(date) |>
  mutate(date = as.Date(date)) |>
  ggplot(aes(x = date, y = maxdayoutage)) + 
  geom_col()

outageALL |>
  filter(county == "Harris") |>
  filter(date > '2020-08-20' & date < '2020-08-30' ) |>
  arrange(date) |>
  mutate(date = as.Date(date)) |>
  ggplot(aes(x = date, y = maxdayoutage)) + 
  geom_col()

outageALL |>
  filter(county == "Harris") |>
  filter(date > '2020-07-20' & date < '2020-07-30' ) |>
  arrange(date) |>
  mutate(date = as.Date(date)) |>
  ggplot(aes(x = date, y = maxdayoutage)) + 
  geom_col()
```
```{r}
outageALL |>
  filter(maxdayoutage > 10000) |>
  filter(date > '2021-01-01' & date < '2021-04-01') |>
  arrange(date) |>
  mutate(date = as.Date(date)) |>
  ggplot(aes(x = date, y = maxdayoutage)) + 
  geom_col()
```


```{r}
outageALL |>
  filter(county == "Harris") |>
  arrange(date) |>
  filter(date > '2018-01-01' ) |>
  mutate(date = as.Date(date)) |>
  ggplot(aes(x = date, y = maxdayoutage)) + 
  geom_col()
```

```{r}
process2022 <- outagerawdf |>
  filter(state == "Florida") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2021 <- outagerawdf2021 |>
  filter(state == "Florida") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2020 <- outagerawdf2020 |>
  filter(state == "Florida") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2019 <- outagerawdf2019 |>
  filter(state == "Florida") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2018 <- outagerawdf2018 |>
  filter(state == "Florida") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2017 <- outagerawdf2017 |>
  filter(state == "Florida") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2016 <- outagerawdf2016 |>
  filter(state == "Texas") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 

process2015 <- outagerawdf2015 |>
  filter(state == "Texas") |>
  arrange(desc(sum)) |>
  separate(run_start_time, into = c("date", "time"), sep = " ") |>
  mutate(time = ifelse(is.na(time), "00:00:00", time)) |>
  drop_na() 


```
```{r}
processALL = bind_rows(process2022, process2021, process2020, process2019, process2018, process2017, process2016, process2015)
```
```{r}
process2017 |>
  filter(county == "Harris")
```


```{r}
process2017 |>
arrange(desc(sum))
```



```{r}
write_csv(processALL, "FLprocessALL.csv")
library(tidyverse)

processALL <- read_csv("processALL.csv")
TXhurprocss <- processALL |>
  filter(state == "Texas")
```

```{r}
TXhurprocss |>
  filter(date > '2021-02-14' & date < '2021-02-20') |>
  filter(county == "Harris" | 
         county == "Fort Bend" |
         county == "Brazoria" |
         county == "Galveston" ) |>
   merge(TXpop) |>
  filter(sum < population) |>
  summarise(impactPOP = max(sum)/population, .by = c(county, state, date, time)) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = impactPOP, color = county)) + 
  geom_line() +
  facet_wrap(~county) + 
  labs(x = "Date", y = "Outages per Population")
```
```{r}
fipsTXvulnerM <- TXhurprocss |>
  filter(date > '2021-02-13' & date < '2021-02-20') |>
  merge(TXpop) |>
  filter(sum < population) |>
  summarise(impactPOP = max(sum)/population, .by = c(county, fips_code)) |>
  unique()
  


write_csv(fipsTXvulnerM, "fipsTXvulnerM.csv")

TXhurprocss |>
  summarise(counttest = n(), .by = c(fips_code)) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = impactPOP, color = county)) + 
  geom_line() +
  facet_wrap(~county)
```


```{r}

```





```{r}
TXhurprocss |>
  filter(date > '2021-09-10' & date < '2021-09-20') |>
  filter(county == "Harris" | 
         county == "Fort Bend" |
         county == "Brazoria" |
         county == "Galveston" ) |>
  merge(TXpop) |>
  filter(sum < population) |>
  summarise(hurimpactPOP = sum(sum)/population, .by = c(county, state, date, time)) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = hurimpactPOP, color = county)) + 
  geom_line() +
  facet_wrap(~county)  + 
  labs(x = "Date", y = "Outages per Population")
```
```{r}
#Testing

my_exp_formula <-  y ~ a * exp(b*x-0)

TXhurprocss |>
  filter(date > '2021-09-12') |>
  filter(date < '2021-09-20') |>
  filter(county == "Harris" | 
         county == "Fort Bend" |
         county == "Brazoria" |
         county == "Galveston" ) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  arrange(desc(sum)) |>
  merge(TXpop) |>
  filter(sum < population) |>
  summarise(hurimpactPOP = sum(sum), .by = c(county, state, date, time)) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = hurimpactPOP, color = county)) + 
  geom_line() +
  geom_smooth(method="lm", aes(color="county"), formula = y ~ a * x^b)
  facet_wrap(~county) 
```




```{r}
process2021 |>
  filter(county == "Harris" | 
         county == "Dallas" |
         county == "Tarrant" |
         county == "Bexar" |  
         county == "Travis") |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = sum)) + 
  geom_col()
```
```{r}
processALL |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  mutate(scale10 = sum*10) |>
  ggplot(aes(x = datetime, y = scale10)) + 
  geom_col()
```



```{r}
processALL |>
  filter(date > '2021-09-11' & date < '2021-09-20' ) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = sum)) + 
  geom_col()

processALL |>
  filter(date > '2020-10-01' & date < '2020-10-20' ) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = sum)) + 
  geom_col()

processALL |>
  filter(date > '2021-02-14' & date < '2021-02-20' ) |>
  mutate(date = as.Date(date)) |>
  arrange(date) |>
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) |>
  ggplot(aes(x = datetime, y = sum)) + 
  geom_col()



```




```{r}
TXhurprocss
```


```{r}
#Hurricane Laura

TXhurprocss |>
  arrange(date) |>
  filter(date > '2020-08-15' & date < '2020-09-01') |>
  merge(TXpop) |>
  filter(sum < population) |>
  arrange(desc(sum)) |>
  summarise(sumdemage = sum(sum), .by = county) |>
  arrange(desc(sumdemage))
```


```{r}
freqTXhur <- TXhurprocss |>
  mutate(month = str_sub(date, 0, 7)) |>
  arrange(sum) |>
  filter(sum > 1000) |>
  merge(TXpop) |>
  filter(sum < population) |>
  filter(date > '2019-09-15' & date < '2019-09-25' |
         date > '2020-07-20' & date < '2020-08-01' |
         date > '2020-08-20' & date < '2020-09-05' |
         date > '2020-09-10' & date < '2020-09-20' |
         date > '2020-10-05' & date < '2020-10-20' |
         date > '2021-09-10' & date < '2021-09-20'
         ) |>
  arrange(month) 

frequencydf <- freqTXhur |>
  mutate(hur1 = if_else(date > '2019-09-15' & date < '2019-09-25', 1, 0),
         hur2 = if_else(date > '2020-07-20' & date < '2020-08-01', 1, 0),
         hur3 = if_else(date > '2020-08-20' & date < '2020-09-05', 1, 0),
         hur4 = if_else(date > '2020-09-10' & date < '2020-09-20', 1, 0),
         hur5 = if_else(date > '2020-10-05' & date < '2020-10-20', 1, 0),
         hur6 = if_else(date > '2021-09-10' & date < '2021-09-20', 1, 0)) |>
  summarise(greatestsum = max(sum), .by = c(month, fips_code, county, hur1, hur2, hur3, hur4, hur5, hur6))|>
  arrange(county) |>
  mutate(totalfreq = hur1 + hur2 + hur3 + hur4 + hur5 +hur6) |>
  summarise(frequency = sum(totalfreq), .by = c(county, fips_code))
  
```

```{r}
freqTXhur |>
  ggplot(aes(x = date)) + 
  geom_histogram()
```


```{r}

TXhurprocss |>
  summarise(maxsumdaily = max(sum), .by = c(fips_code, county, date)) 

countieslistTX <- TXhurprocss |>
  summarise(hi = 0, .by = c(county, fips_code))
```

```{r}
TXhurprocss |>
  filter(state == "Texas") |>
  filter(date > "2017-08-20") |>
  filter(date < "2017-09-10") |>
  group_by(county)

```

```{r}

centercounty <- county_centers |>
  filter(state_name == "Texas") |>
  mutate(fips_code = as.double(fips)) |>
  select(fips_code, population, latitude, longitude)

TXhurprocss |>
  filter(state == "Texas")|>
  merge(centercounty)
  
```
```{r}
TXhurprocss |>
  arrange(date)
```


```{r}
library(tidyverse)
library(hurricaneexposuredata)

lgdf <- read_csv("lgdf.csv")
TXpop <- read_csv("TXPOP.csv")
areadf <- lgdf |>
  select(AREA, fips_code) |>
  unique()

windimpact <- lgdf |>
  summarise(windspeedinfluence = max(windspeedinfluence), .by = fips_code) |>
  unique()

dataoutage <- TXhurprocss |>
  filter(date > '2021-02-13' & date < '2021-03-01') 
  
TXpop <- TXpop |>
  mutate(population = Estimates) |>
  mutate(county = str_remove(Counties, ".")) |>
  mutate(county = gsub(" County, Texas", "", county)) 

predatamange <- dataoutage |>
  merge(TXpop) |>
  select(fips_code, county, state, sum, population, date, time) |>
  filter(sum <= population)
  

ULTIMATEdata <- predatamange |>
  mutate(datetime = as.POSIXct(paste(date, time), 
                               format = "%Y-%m-%d %H:%M:%S")) |>
  mutate(vulcounty = sum/population, .by = c(county, fips_code))  |>
  arrange(datetime) |>
  filter(sum >= 1000) |>
  mutate(maxvulcounty = max(sum)/population, .by = c(county, fips_code))  |>
  mutate(maxdate = ifelse(vulcounty == maxvulcounty, datetime, NA), 
         .by = c(county, fips_code)) |>
  mutate(maxdate = max(maxdate, na.rm = TRUE),
         .by = c(county, fips_code)) |>
  mutate(maxdate = as.POSIXct(maxdate),
         .by = c(county, fips_code)) |>
  mutate(date_start = min(datetime),
         date_end = max(datetime),
         .by = c(county, fips_code)) |>
  summarise(resilience = maxdate - date_start, 
            recover = date_end- maxdate, 
            vulnerability = maxvulcounty,
            outagesmax = max(sum),
            population = population,
            max_rateincrease = max(diff(sum) / as.numeric(diff(datetime)), na.rm = TRUE),
            .by = c(county, fips_code)) |>
  mutate(resilience2 = as.double(resilience)) |>
  select(!resilience2) |>
  filter(outagesmax > 0.01*population) |>
  filter(resilience != 0 & recover != 0) |>
  merge(areadf) |>
  unique() |>
  arrange(county)


```



```{r}
library(dplyr)

df <- predatamange %>%
  mutate(datetime = as.POSIXct(paste(date, time), format = "%Y-%m-%d %H:%M:%S")) %>%
  mutate(vulcounty = sum / population, .by = c(county, fips_code)) %>%
  arrange(datetime) %>%
  filter(sum >= 0.01 * population) %>%
  mutate(maxvulcounty = max(sum) / population, .by = c(county, fips_code)) %>%
  mutate(maxdate = if_else(any(!is.na(vulcounty)), max(datetime[vulcounty == maxvulcounty]), NA_real_), .by = c(county, fips_code)) %>%
  mutate(maxdate = as.POSIXct(maxdate), .by = c(county, fips_code)) %>%
  mutate(date_start = case_when(
    sum > 0.1 * population & datetime <= maxdate ~ datetime,
    TRUE ~ as.POSIXct(NA, origin = "1970-01-01")
  )) %>%
  mutate(date_end = if_else(datetime > maxdate & lead(datetime) > maxdate & sum <= 0.1 * population, datetime, as.POSIXct(NA, origin = "1970-01-01")))

# Print the updated dataframe
print(df)


```
```{r}
ULTIMATEdata
```







